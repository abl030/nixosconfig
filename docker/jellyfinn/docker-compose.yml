version: "3.8"

services:
  # ---------------------------------------------------------------
  # Network holder (shared network namespace for Jellyfin, Caddy,
  # and the Tailscale sidecar). Ports are exposed here.
  # ---------------------------------------------------------------
  jellyfin-network-holder:
    image: k8s.gcr.io/pause:3.9
    container_name: jellyfin_network_holder
    ports:
      - "8096:8096" # Jellyfin HTTP
      - "8920:8920" # Jellyfin HTTPS (optional)
      - "7359:7359/udp" # Discovery (optional)
      - "1900:1900/udp" # DLNA (optional)
      - "3468:3468" # Autoscan
      - "8080:8080" # Watchstate WebUI
    restart: unless-stopped

  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    environment:
      - PUID=99 # Replace with your user ID if needed
      - PGID=100 # Replace with your group ID if needed
      - UMASK=0000 # Optional
      - TZ=Australia/Perth # Optional: Set your timezone
      # Set to your Proxmox host's LAN IP for local discovery/apps that might need it
      # Tailscale access will use the Tailscale IP automatically due to shared network
      - JELLYFIN_PublishedServerUrl=192.168.1.33 # <<< CHANGE to Proxmox host LAN IP
    volumes:
      - /mnt/docker/jellyfin:/config # <<< CHANGE THIS
      - "/mnt/data/Media/TV Shows/:/data/tvshows:ro"
      - /mnt/data/Media/Movies/:/data/movies:ro # <<< CHANGE THIS
      # Add more media volumes as needed
    devices:
      # AMD GPU passthrough for Jellyfin
      - /dev/dri:/dev/dri
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
    # --- minimal but necessary change: share the holder's network ---
    network_mode: "service:jellyfin-network-holder"
    depends_on:
      jellyfin-network-holder:
        condition: service_started

  # ---------------------------------------------------------------
  # Tailscale sidecar shares the same network namespace as Jellyfin
  # (via the network-holder). No direct ports here.
  # ---------------------------------------------------------------
  tailscale:
    image: tailscale/tailscale:latest
    container_name: jellyfin-tailscale-sidecar
    network_mode: "service:jellyfin-network-holder"
    volumes:
      - /mnt/docker/jellyfin/tailscale:/var/lib/tailscale
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - NET_ADMIN
      - NET_RAW
    environment:
      - TS_HOSTNAME=jellyfin
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_USERSPACE=false
      - TS_ACCEPT_DNS=false
      # Optional:
      # - TS_EXTRA_ARGS=--advertise-exit-node
      # - TS_EXTRA_ARGS=--operator=your_tailscale_login_name
    restart: unless-stopped
    depends_on:
      jellyfin-network-holder:
        condition: service_started

  # ---------------------------------------------------------------
  # Custom Caddy (for your own domains/certs), sharing the same
  # network namespace as Jellyfin (via the holder).
  # ---------------------------------------------------------------
  caddy:
    # image: caddy:latest
    build:
      context: .
      dockerfile: ../tailscale/caddy/Dockerfile
    container_name: jellyfin-caddy
    network_mode: "service:jellyfin-network-holder"
    environment:
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
    volumes:
      - /mnt/docker/jellyfin/caddy/Caddyfile:/etc/caddy/Caddyfile
      - /mnt/docker/jellyfin/caddy_data:/data
      - /mnt/docker/jellyfin/caddy/caddy_config:/config
      - /etc/localtime:/etc/localtime:ro
    restart: always
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    # Optional healthcheck example:
    # healthcheck:
    #   test: ["CMD", "caddy", "api", "get", "--endpoint", "/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 10s
    depends_on:
      jellyfin-network-holder:
        condition: service_started
    stdin_open: true
    tty: true

  autoscan:
    image: ghcr.io/niniyas/autoscan:latest
    container_name: jellyfin-autoscan
    network_mode: "service:jellyfin-network-holder" # shares the same network namespace
    volumes:
      - /mnt/docker/jellyfin/autoscan:/config # config.json and database
      - /var/run/docker.sock:/var/run/docker.sock # needed if controlling Docker containers
    environment:
      - PUID=99
      - PGID=100
      - UMASK=0000
      - TZ=Australia/Perth
    restart: unless-stopped
    depends_on:
      jellyfin-network-holder:
        condition: service_started

  watchstate:
    image: ghcr.io/arabcoders/watchstate:latest
    container_name: watchstate
    user: "99:100"
    network_mode: "service:jellyfin-network-holder"
    volumes:
      - /mnt/docker/jellyfin/watchstate:/config
    restart: unless-stopped
    depends_on:
      jellyfin-network-holder:
        condition: service_started
