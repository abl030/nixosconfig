version: "3.8"

services:
  # ---------------------------------------------------------------
  # Network holder for the core Jellyfin services
  # ---------------------------------------------------------------
  jellyfin-network-holder:
    image: k8s.gcr.io/pause:3.9
    container_name: jellyfin_network_holder
    ports:
      - "8096:8096" # Jellyfin HTTP
      - "8920:8920" # Jellyfin HTTPS (optional)
      - "7359:7359/udp" # Discovery (optional)
      - "1900:1900/udp" # DLNA (optional)
      - "3468:3468" # Autoscan
      - "8080:8080" # Watchstate WebUI
      # NOTE: Port 3000 for Jellystat has been moved
      - "9999:9999/udp" # inotify-receiver UDP (added)
    restart: unless-stopped
    networks:
      - jellyfin-net

  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    environment:
      - PUID=99
      - PGID=100
      - UMASK=0000
      - TZ=Australia/Perth
      - JELLYFIN_PublishedServerUrl=192.168.1.33
    volumes:
      - /mnt/docker/jellyfin/jellyfin:/config
      - "/mnt/fuse/Media/TV_Shows:/data/tvshows"
      - "/mnt/fuse/Media/Movies:/data/movies"
      - "/mnt/fuse/Media/Music:/data/music"
    devices:
      - /dev/dri:/dev/dri
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
    network_mode: "service:jellyfin-network-holder"
    depends_on:
      - jellyfin-network-holder

  tailscale:
    image: tailscale/tailscale:latest
    container_name: jellyfin-tailscale-sidecar
    network_mode: "service:jellyfin-network-holder"
    volumes:
      - /mnt/docker/jellyfin/tailscale:/var/lib/tailscale
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - NET_ADMIN
      - NET_RAW
    environment:
      - TS_HOSTNAME=jellyfin
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_USERSPACE=false
      - TS_ACCEPT_DNS=false
    restart: unless-stopped
    depends_on:
      - jellyfin-network-holder

  caddy:
    image: ghcr.io/caddybuilds/caddy-cloudflare:latest
    container_name: jellyfin-caddy
    network_mode: "service:jellyfin-network-holder"
    environment:
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
    volumes:
      - /mnt/docker/jellyfin/caddy/Caddyfile:/etc/caddy/Caddyfile
      - /mnt/docker/jellyfin/caddy/data:/data
      - /mnt/docker/jellyfin/caddy/config:/config
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    depends_on:
      - jellyfin-network-holder

  # autoscan:
  #   image: ghcr.io/niniyas/autoscan:latest
  #   container_name: jellyfin-autoscan
  #   network_mode: "service:jellyfin-network-holder"
  #   volumes:
  #     - /mnt/docker/jellyfin/autoscan:/config
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   environment:
  #     - PUID=99
  #     - PGID=100
  #     - UMASK=0000
  #     - TZ=Australia/Perth
  #   restart: unless-stopped
  #   depends_on:
  #     - jellyfin-network-holder

  watchstate:
    image: ghcr.io/arabcoders/watchstate:latest
    container_name: watchstate
    user: "99:100"
    network_mode: "service:jellyfin-network-holder"
    environment:
      - TZ=Australia/Perth
    volumes:
      - /mnt/docker/jellyfin/watchstate:/config
    restart: unless-stopped
    depends_on:
      - jellyfin-network-holder

  # ---------------------------------------------------------------
  # Jellystat Services
  # ---------------------------------------------------------------
  jellystat-db:
    image: "postgres:15.2"
    container_name: jellystat-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=jellystat
      - POSTGRES_PASSWORD=${JELLYSTAT_DB_PASSWORD}
    volumes:
      - "/mnt/docker/jellyfin/jellystat/postgres-data:/var/lib/postgresql/data"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jellystat"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - jellyfin-net

  jellystat:
    image: "cyfershepard/jellystat:latest"
    container_name: jellystat
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - POSTGRES_USER=jellystat
      - POSTGRES_PASSWORD=${JELLYSTAT_DB_PASSWORD}
      - POSTGRES_IP=jellystat-db
      - POSTGRES_PORT=5432
      - JWT_SECRET=${JELLYSTAT_JWT_SECRET}
      - TZ=Australia/Perth
    volumes:
      - "/mnt/docker/jellyfin/jellystat/backup-data:/app/backend/backup-data"
    depends_on:
      jellystat-db:
        condition: service_healthy
    networks:
      - jellyfin-net

  # ---------------------------------------------------------------
  # inotify receiver (socat + tiny handler script) with startup logs + healthcheck
  # ---------------------------------------------------------------
  inotify-receiver:
    image: alpine:3.20
    container_name: inotify-receiver
    network_mode: "service:jellyfin-network-holder"
    restart: unless-stopped
    volumes:
      - "/mnt/fuse/Media/TV_Shows:/data/tv:rw"
      - "/mnt/fuse/Media/Movies:/data/movies:rw"
      - "/mnt/fuse/Media/Music:/data/music:rw"
      - /home/abl030/nixosconfig/docker/jellyfinn/inotify-recv.sh:/usr/local/bin/inotify-recv.sh:ro
    environment:
      - HEALTH_INTERVAL=30
      - HEALTH_WINDOW=180
      - HEALTH_FILE=/tmp/receiver-healthy
      # You can override these to match custom mounts; these are the defaults used by inotify-recv.sh
      - ROOT_MOVIES=/data/movies
      - ROOT_TV=/data/tv
      - ROOT_MUSIC=/data/music
    command:
      - /bin/sh
      - -lc
      - |
        set -e
        apk add --no-cache socat >/dev/null 2>&1 || true

        # Resolve defaults at runtime (avoid compose pre-substitution)
        HEALTH_FILE="$${HEALTH_FILE:-/tmp/receiver-healthy}"
        [ -n "$$HEALTH_FILE" ] || HEALTH_FILE=/tmp/receiver-healthy
        mkdir -p "$$(dirname "$$HEALTH_FILE")"
        : >"$$HEALTH_FILE" || { echo "[receiver] cannot write $$HEALTH_FILE"; exit 1; }

        ROOT_MOVIES="$${ROOT_MOVIES:-/data/movies}"
        ROOT_TV="$${ROOT_TV:-/data/tv}"
        ROOT_MUSIC="$${ROOT_MUSIC:-/data/music}"

        echo "[receiver] listening UDP 0.0.0.0:9999"
        echo "[receiver] guards: movies=$$ROOT_MOVIES tv=$$ROOT_TV music=$$ROOT_MUSIC"
        echo "[receiver] healthfile: $$HEALTH_FILE (interval=$${HEALTH_INTERVAL:-30}s window=$${HEALTH_WINDOW:-180}s)"

        # Start socat (fork spawns per datagram). If it dies, container exits.
        socat -u UDP4-RECVFROM:9999,bind=0.0.0.0,fork SYSTEM:/usr/local/bin/inotify-recv.sh &
        SOCAT_PID=$!

        # Heartbeat loop: update only if socat is alive
        (
          while sleep "$${HEALTH_INTERVAL:-30}"; do
            if kill -0 "$$SOCAT_PID" 2>/dev/null; then
              date +%s >"$$HEALTH_FILE" || true
            else
              exit 0
            fi
          done
        ) &

        # Reap socat (main process exits if socat dies)
        wait "$$SOCAT_PID"
    healthcheck:
      test: >
        sh -lc '
          pidof socat >/dev/null 2>&1 &&
          now=$(date +%s) &&
          h=$(cat "$${HEALTH_FILE:-/tmp/receiver-healthy}" 2>/dev/null || echo 0) &&
          [ $((now - h)) -lt $${HEALTH_WINDOW:-180} ]'
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt: ["no-new-privileges:true"]
    tmpfs: ["/tmp", "/run"]
    depends_on:
      - jellyfin-network-holder

# Define the custom network used by the services
networks:
  jellyfin-net:
    driver: bridge
