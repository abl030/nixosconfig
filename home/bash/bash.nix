{
  lib,
  config,
  ...
  # The empty let block was removed as it served no purpose and added noise.
}: {
  # Import modules for tools that will be integrated into the shell.
  imports = [
    ../utils/starship.nix # Starship config is shell-agnostic, we can reuse it.
    ../utils/atuin.nix
  ];

  # All program configurations are grouped under a single 'programs' attribute set.
  # This is the standard Nix structure, preventing merge conflicts and improving clarity.
  programs = {
    bash = {
      enable = true;

      # --- Quality of Life Features ---
      enableCompletion = true; # Enable standard bash-completion.
      enableVteIntegration = true; # Helps terminals track the current directory.

      # --- History Settings ---
      # Replicate some of Zsh's sensible history defaults.
      historyControl = ["ignoredups" "erasedups"];
      historySize = 10000;
      historyFileSize = 10000;

      # --- Aliases ---
      # Directly translated from your zsh config.
      shellAliases = (import ../../modules/home-manager/shell/aliases.nix {inherit lib config;}).sh;

      # --- Custom Scripts and Initialization ---
      initExtra = ''
        # Use the green Starship theme for bash (generated by starship.nix)
        export STARSHIP_CONFIG="${config.home.homeDirectory}/.config/starship-bash.toml"

        # Define the flake path variable for our functions.
        # This is the Bash equivalent of the 'set -l' in your Zsh functions.
        export _RELOAD_FLAKE_PATH="${config.home.homeDirectory}/nixosconfig#"

        # Source our custom functions file.
        source ${../zsh/my_functions.sh}
        source ${../zsh/copycr.sh}
      '';
    };

    # --- Program Integrations ---
    starship.enableBashIntegration = true;
    zoxide = {
      enable = true;
      enableBashIntegration = true;
    };
    atuin = {
      # Configuration is in the imported atuin.nix
      enableBashIntegration = true;
    };
  };

  # Note on Autocomplete:
  # Bash does not have a direct equivalent to Zsh's powerful autosuggestions
  # or syntax highlighting out of the box. `enableCompletion` provides
  # standard tab-completion, which is the primary QoL feature for Bash.
}
