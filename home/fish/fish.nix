# ./home/fish/fish.nix
{
  lib,
  config,
  pkgs,
  ...
}: let
  flakeBase = "${config.home.homeDirectory}/nixosconfig";

  # Source scripts as *store paths* so the wrapper list is reproducible.
  myFunctions = ../zsh/my_functions.sh;
  copycr = ../zsh/copycr.sh;

  # Build-time generator: ask Bash for function names, emit Fish wrappers.
  bashWrappers =
    pkgs.runCommand "bash-function-wrappers.fish"
    {
      inherit myFunctions copycr;
      bash = "${pkgs.bash}/bin/bash";
    }
    ''
            set -euo pipefail

            # Discover function names from the actual Bash runtime.
            funcs="$($bash -lc 'set -e
              source "$myFunctions"
              source "$copycr"
              declare -F | awk "{print \$3}"
            ')"

            # Filter: valid identifiers, no leading "_" (private), unique & sorted.
            printf '%s\n' "$funcs" \
              | grep -E '^[A-Za-z][A-Za-z0-9_]*$' \
              | grep -v '^_' \
              | sort -u > names.txt

            # Generate fish wrappers with non-shadowing guards.
            {
              echo '# Auto-generated by runCommand at build time'
              echo '# Wraps Bash functions using __bash_call; guarded to avoid shadowing.'
              while IFS= read -r name; do
                cat <<EOF
      if not functions -q $name; and not type -q $name
        function $name
          __bash_call $name \$argv
        end
      end
      EOF
              done < names.txt
            } > "$out"
    '';
in {
  imports = [
    ../utils/starship.nix
    ../utils/atuin.nix
  ];

  programs.fish = {
    enable = true;

    shellInit = ''
      # Use the red Starship theme for fish (generated by starship.nix)
      set -gx STARSHIP_CONFIG "${config.home.homeDirectory}/.config/starship-fish.toml"
      set -gx _RELOAD_FLAKE_PATH "${flakeBase}#"
    '';

    # Single helper that runs your Bash functions with the *same* sources used
    # during generation (store paths, reproducible).
    functions.__bash_call = ''
      set -l func $argv[1]
      set -e argv[1]
      ${pkgs.bash}/bin/bash -lc 'source "'"${myFunctions}"'"; source "'"${copycr}"'"; '"$func"' "$@"' -- $argv
      return $status
    '';

    # Your existing abbreviations
    shellAbbrs = (import ../../modules/home-manager/shell/aliases.nix {inherit lib config;}).fish;
  };

  programs.starship.enableFishIntegration = true;
  programs.zoxide = {
    enable = true;
    enableFishIntegration = true;
  };
  programs.atuin.enable = true;
  programs.atuin.enableFishIntegration = true;
  programs.fzf = {
    enable = true;
    enableFishIntegration = true;
  };

  # Load the generated wrapper file at shell startup (no work done at runtime,
  # just function definitions; shadowing still guarded by `type -q`).
  xdg.configFile."fish/conf.d/10-bash-wrappers.fish".source = bashWrappers;
}
