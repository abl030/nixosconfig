name: "Build and Cache NixOS/HM (no all-hosts)"

on:
  # Run once for pushes to master
  push:
    branches: [master]
  # Run for PRs targeting master (branch pushes won't trigger)
  pull_request:
    branches: [master]
  workflow_dispatch:

# Ensure only one run per PR or ref; cancel older in-progress runs
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build-and-cache:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            # If any inputs are private GitHub repos:
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Configure Cachix
        uses: cachix/cachix-action@v15
        with:
          name: nixosconfig
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Build + push nixosConfigurations and homeConfigurations
        shell: bash
        run: |
          set -euo pipefail

          # Use sudo if available (for GC roots & GC)
          if command -v sudo >/dev/null; then SUDO=sudo; else SUDO=; fi

          # Prefer system gcroots; fall back to per-user if needed (GC won't see per-user unless you also register an indirect root).
          ROOT_BASE="/nix/var/nix/gcroots/nix-serve"
          if ! $SUDO install -d -m 0755 "$ROOT_BASE"; then
            ROOT_BASE="$HOME/.cache/nix-serve-gcroots"
            mkdir -p "$ROOT_BASE"
            echo "Using per-user GC roots at $ROOT_BASE (note: system GC won't see these)."
          fi

          # Helper: push full closure of a store path to Cachix
          push_closure() {
            local path="$1"
            # Push in chunks to avoid arg length issues
            nix path-info -r "$path" | xargs -r -n 128 cachix push nixosconfig
          }

          # Helper: keep only the latest build on nix-serve via a single GC root (symlink under /nix/var/nix/gcroots)
          keep_latest_root() {
            local tag="$1" out="$2"
            local root="$ROOT_BASE/${tag}-latest"
            $SUDO ln -sfn "$out" "$root"
          }

          # Enumerate sets without jq / getFlake
          HOSTS_RAW="$(nix eval --raw .#nixosConfigurations \
            --apply 'x: builtins.concatStringsSep "\n" (builtins.attrNames x)' \
            2>/dev/null || echo "")"

          HOMES_RAW="$(nix eval --raw .#homeConfigurations \
            --apply 'x: builtins.concatStringsSep "\n" (builtins.attrNames x)' \
            2>/dev/null || echo "")"

          if [[ -z "${HOSTS_RAW}${HOMES_RAW}" ]]; then
            echo "Error: flake exports neither nixosConfigurations nor homeConfigurations."
            exit 1
          fi

          # Build + push NixOS systems
          if [[ -n "${HOSTS_RAW}" ]]; then
            readarray -t HOSTS <<< "${HOSTS_RAW}"
            echo "Discovered nixosConfigurations:"
            for h in "${HOSTS[@]}"; do echo "  - ${h}"; done

            for h in "${HOSTS[@]}"; do
              echo "::group::nixosConfigurations.${h}"
              out="$(nix build \
                --accept-flake-config \
                --no-link \
                --print-out-paths \
                ".#nixosConfigurations.${h}.config.system.build.toplevel")"

              # 1) Push full closure to Cachix
              push_closure "$out"

              # 2) Keep only latest on nix-serve (single GC root per host)
              keep_latest_root "nixos-${h}" "$out"

              # 3) Retain 7 days on Cachix via pins (per host)
              cachix pin nixosconfig "nixos-${h}" "$out" --keep-days 7

              echo "::endgroup::"
            done
          else
            echo "No nixosConfigurations exported by flake."
          fi

          # Build + push Home Manager activations
          if [[ -n "${HOMES_RAW}" ]]; then
            readarray -t HOMES <<< "${HOMES_RAW}"
            echo "Discovered homeConfigurations:"
            for u in "${HOMES[@]}"; do echo "  - ${u}"; done

            for u in "${HOMES[@]}"; do
              echo "::group::homeConfigurations.${u}"
              out="$(nix build \
                --accept-flake-config \
                --no-link \
                --print-out-paths \
                ".#homeConfigurations.${u}.activationPackage")"

              # 1) Push full closure to Cachix
              push_closure "$out"

              # 2) Keep only latest HM activation on nix-serve (optional but handy)
              keep_latest_root "hm-${u}" "$out"

              # 3) Retain 7 days on Cachix via pins (per HM config)
              cachix pin nixosconfig "hm-${u}" "$out" --keep-days 7

              echo "::endgroup::"
            done
          else
            echo "No homeConfigurations exported by flake."
          fi

          # Reclaim local space: anything not reachable from "latest" roots is removed
          $SUDO nix-collect-garbage --delete-old || true
          $SUDO nix-store --optimise || true
