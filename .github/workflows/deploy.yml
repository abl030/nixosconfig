name: "Build and Cache NixOS/HM (no all-hosts)"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-cache:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            # Helps if any inputs are private Git repos:
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Configure Cachix
        uses: cachix/cachix-action@v15
        with:
          name: nixosconfig
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      # Build every nixosConfigurations.<host>.config.system.build.toplevel and push to Cachix
      - name: Build + push all nixosConfigurations
        shell: bash
        run: |
          set -euo pipefail
          # Use jq from nixpkgs without polluting the runner:
          nix shell --quiet nixpkgs#jq -c bash -lc '
            # List host names exported by your flake
            mapfile -t HOSTS < <(nix eval --json .#nixosConfigurations --apply builtins.attrNames | jq -r ".[]")
            if [ "${#HOSTS[@]}" -eq 0 ]; then
              echo "No nixosConfigurations found; skipping."
              exit 0
            fi
            for h in "${HOSTS[@]}"; do
              echo "::group::nixosConfigurations.${h}"
              # Build but don’t leave ./result symlinks everywhere
              OUT=$(nix build --no-link --print-out-paths ".#nixosConfigurations.${h}.config.system.build.toplevel")
              # Push full closure to Cachix
              nix copy --to "cachix://nixosconfig" "$OUT"
              echo "::endgroup::"
            done
          '

      # Build every homeConfigurations.<name>.activationPackage (if present) and push to Cachix
      - name: Build + push all homeConfigurations (if any)
        shell: bash
        run: |
          set -euo pipefail
          nix shell --quiet nixpkgs#jq -c bash -lc '
            # If homeConfigurations isn’t exported, just skip
            if ! nix eval --json .#homeConfigurations --apply builtins.attrNames >/dev/null 2>&1; then
              echo "No homeConfigurations found; skipping."
              exit 0
            fi
            mapfile -t HOMES < <(nix eval --json .#homeConfigurations --apply builtins.attrNames | jq -r ".[]")
            for u in "${HOMES[@]}"; do
              echo "::group::homeConfigurations.${u}"
              OUT=$(nix build --no-link --print-out-paths ".#homeConfigurations.${u}.activationPackage")
              nix copy --to "cachix://nixosconfig" "$OUT"
              echo "::endgroup::"
            done
          '
