name: "Populate Cachix from flake script"

on:
  push:
    branches: [master]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  populate-cache:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Configure Cachix
        uses: cachix/cachix-action@v15
        with:
          name: nixosconfig
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Populate cache by running your script (auto-push via watch-exec)
        shell: bash
        env:
          # Keep this in the *step* so it applies to the command we run.
          NIX_CONFIG: |
            experimental-features = nix-command flakes
            substituters = https://nixcache.ablz.au?priority=10 https://nix-mirror.ablz.au?priority=20 https://nixosconfig.cachix.org?priority=30 https://cache.nixos.org?priority=40
            trusted-public-keys = ablz.au-1:EYnQ/c34qSA7oVBHC1i+WYh4IEkFSbLQdic+vhP4k54= nixosconfig.cachix.org-1:whoVlEsbDSqKiGUejiPzv2Vha7IcWIZWXue0grLsl2k= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
        run: |
          set -euo pipefail
          # Ensure jq is available for the script, then run it under watch-exec
          cachix watch-exec nixosconfig -- \
            nix shell nixpkgs#jq -c bash ./scripts/populate_cache.sh
