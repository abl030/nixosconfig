name: "Rolling Flake Update (PR CI)"

on:
  pull_request:
    branches: [master]
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write
  actions: read

# Cancel older runs when a new push lands to the same PR branch
concurrency:
  group: pr-populate-cache-${{ github.repository }}-${{ github.event.pull_request.head.ref }}
  cancel-in-progress: true

jobs:
  build-and-cache:
    # Only run for the bot branch
    if: ${{ github.event_name == 'pull_request' && github.head_ref == 'bot/rolling-flake-update' }}
    runs-on: self-hosted
    name: Populate Cache

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Configure Cachix
        uses: cachix/cachix-action@v15
        with:
          name: nixosconfig
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      # Build + push, capturing logs. NOTE the nix shell invocation uses --command (no -c/-- mixups).
      - name: Build & push (capture logs)
        id: build
        shell: bash
        env:
          # Keep NIX_CONFIG a clean multi-line (no trailing backslashes).
          NIX_CONFIG: |
            experimental-features = nix-command flakes
            substituters = https://nixcache.ablz.au?priority=10 https://nix-mirror.ablz.au?priority=20 https://nixosconfig.cachix.org?priority=30 https://cache.nixos.org?priority=40
            trusted-public-keys = ablz.au-1:EYnQ/c34qSA7oVBHC1i+WYh4IEkFSbLQdic+vhP4k54= nixosconfig.cachix.org-1:whoVlEsbDSqKiGUejiPzv2Vha7IcWIZWXue0grLsl2k= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
        run: |
          set -euo pipefail
          mkdir -p ci-logs
          LOG=ci-logs/build.log

          # Run your script with jq available, under watch-exec for automatic Cachix push.
          # IMPORTANT: Use --command form (no stray "--" after -c).
          set +e
          cachix watch-exec nixosconfig -- \
            nix shell nixpkgs#jq --command bash ./scripts/populate_cache.sh \
            2>&1 | tee "$LOG"
          STATUS=${PIPESTATUS[0]}
          set -e

          echo "status=$STATUS" >> "$GITHUB_OUTPUT"

          # Always produce small helper logs for the PR comment
          tail -n 120 "$LOG" > ci-logs/tail.log || true

          # Extract a compact "first error" snippet using awk provided by nixpkgs#gawk
          nix shell nixpkgs#gawk --command awk '
            /error:/ {show=1; n=0}
            show {print; if (n++ > 80) exit}
          ' "$LOG" > ci-logs/first-error-snippet.log || true

          exit "$STATUS"

      - name: Upload logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: populate-cache-logs
          path: ci-logs/

      # Update/replace a single status comment. Use gh via nix shell so we don't depend on runner's PATH.
      - name: Update single PR status comment (always)
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          PR_NUMBER="${{ github.event.pull_request.number }}"
          MARKER="<!-- bot:rolling-status -->"

          status="${{ steps.build.outputs.status }}"
          if [ "$status" = "0" ]; then
            SUMMARY="✅ Cache populate succeeded."
            DETAILS="All builds completed and were pushed to Cachix."
          else
            SUMMARY="❌ Cache populate failed."
            SNIP=$( (echo '```'; cat ci-logs/first-error-snippet.log 2>/dev/null || true; echo '```') )
            TAIL=$( (echo '<details><summary>Log tail</summary>'; echo; echo '```'; cat ci-logs/tail.log 2>/dev/null || true; echo '```'; echo '</details>') )
            DETAILS="First error snippet:\n${SNIP}\n\n${TAIL}\n\nArtifacts: download \"populate-cache-logs\" from this run."
          fi

          NEW_BODY="${MARKER}
          ${SUMMARY}

          ${DETAILS}
          ${MARKER}
          "

          # Find existing comment by marker (via gh provided by nixpkgs#gh)
          CMT_ID="$(
            nix shell nixpkgs#gh --command gh api \
              "repos/${{ github.repository }}/issues/${PR_NUMBER}/comments" \
              --jq '.[] | select(.body | contains("'"$MARKER"'")) | .id' \
              | head -n1 || true
          )"

          if [ -n "$CMT_ID" ]; then
            nix shell nixpkgs#gh --command gh api \
              "repos/${{ github.repository }}/issues/comments/${CMT_ID}" \
              -X PATCH -f body="$NEW_BODY" >/dev/null
          else
            nix shell nixpkgs#gh --command gh pr comment "$PR_NUMBER" --body "$NEW_BODY" >/dev/null
          fi
